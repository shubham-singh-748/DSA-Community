let inputArr = process.argv.slice(2);
console.log(inputArr);
// node main.js tree "DirectoryPath"
// node main.js organize "DirectoryPath"
// node main.js help

let command = inputArr[0];
switch(command)
{
    case "tree":
        treefn(inputArr[1]);
        break;
    case "organize":
        organize(inputArr[1]);
        break;
    case "help":
        helpfn();
        break;
    default:
        console.log("Please Input Right Command");
        break; 
}

function treefn(DirPath)
{
    console.log("Tree command implemeted for " + DirPath);
}
function organize(DirPath)
{
    console.log("Organize command implemnt for " + DirPath);
}
function helpfn()
{
    console.log(`List of all commands: 
                        node main.js tree "DirectoryPath"
                        node main.js organize "DirectoryPath"
                        node main.js help
                        `);
    
}

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(gdb) Attach",
            "type": "cppdbg",
            "request": "attach",
            "program": "enter program name, for example ${workspaceFolder}/a.out",
            "processId": "${command:pickProcess}",
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "type": "java",
            "name": "Launch Current File",
            "request": "launch",
            "mainClass": "${file}"
        },
        {
            "type": "java",
            "name": "Launch AllDuplicatesNum",
            "request": "launch",
            "mainClass": "com.company.AllDuplicatesNum",
            "projectName": "src_d710b9fa"
        },
        {
            "type": "java",
            "name": "Launch DuplicatesNum",
            "request": "launch",
            "mainClass": "com.company.DuplicatesNum",
            "projectName": "src_d710b9fa"
        },
        {
            "type": "java",
            "name": "Launch SetMismatch",
            "request": "launch",
            "mainClass": "com.company.SetMismatch",
            "projectName": "src_d710b9fa"
        },
        {
            "type": "java",
            "name": "Launch containsDuplicate",
            "request": "launch",
            "mainClass": "com.company.containsDuplicate",
            "projectName": "src_d710b9fa"
        },
        {
            "type": "java",
            "name": "Launch diappearedNum",
            "request": "launch",
            "mainClass": "com.company.diappearedNum",
            "projectName": "src_d710b9fa"
        },
        {
            "type": "java",
            "name": "Launch findPositiveNum",
            "request": "launch",
            "mainClass": "com.company.findPositiveNum",
            "projectName": "src_d710b9fa"
        },
        {
            "type": "java",
            "name": "Launch majorityyElement",
            "request": "launch",
            "mainClass": "com.company.majorityyElement",
            "projectName": "src_d710b9fa"
        },
        {
            "type": "java",
            "name": "Launch missingNum",
            "request": "launch",
            "mainClass": "com.company.missingNum",
            "projectName": "src_d710b9fa"
        }
    ]
}

package com.company;

//WAJP to rotate the shell of matrix by R rotation and display the
//matrix using rows and columns.

import java.util.Scanner;

public class ShellRotate {
    public static void main(String[] args) {
        try (Scanner scn = new Scanner(System.in)) {
            System.out.println("Enter values");
            int rows = scn.nextInt();
            int col = scn.nextInt();
            System.out.println();

            int[][] arr = new int[rows][col];
            for(int i=0; i<arr.length; i++)
            {
                for(int j=0; j<arr[i].length; j++)
                {
                    arr[i][j] = scn.nextInt();
                }
            }
            System.out.println();

            int shell = scn.nextInt();
            int rotate = scn.nextInt();

            rotateShell(arr, shell, rotate);
            display(arr);
        }
    }

    private static void display(int[][] arr) 
    {
        for(int i=0; i<arr.length; i++)
        {
            for(int j=0; j<arr[i].length; j++)
            {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }

    static void rotateShell(int[][] arr, int shell, int rotate) 
    {
        int[] oneDimensional = filloneDimensionalFromShell(arr, shell);
        rotate(oneDimensional, rotate);
        fillShellFromOneDimensional(arr, shell, oneDimensional);
    }

    static int[] filloneDimensionalFromShell(int[][] arr, int shell) 
    {
        int minRows = shell - 1;
        int minCol = shell - 1;
        int maxRows = arr.length - shell;
        int maxCol = arr[0].length - shell;
        int size = 2 * (maxRows - minRows + maxCol - minCol);

        int[] oneDimensional = new int[size];

        //For left wall
        int ind = 0;
        for(int i=minRows, j = minCol; i<=maxRows; i++)
        {
            oneDimensional[ind] = arr[i][j];
            ind++;
        }
        //For bottom wall
        for(int i=maxRows, j=minCol; j<=maxCol; j++)
        {
            oneDimensional[ind] = arr[i][j];
            ind++;
        }
        //For right wall
        for(int i=maxRows - 1, j=maxCol; i>=minRows; i--)
        {
            oneDimensional[ind] = arr[i][j];
            ind++;
        }
        //For top wall
        for(int i=minRows, j=maxCol-1; j>=minCol + 1; j--)
        {
            oneDimensional[ind] = arr[i][j];
            ind++;
        }
        return oneDimensional;
    }

    private static void fillShellFromOneDimensional(int[][] arr, int shell, int[] oneDimensional) 
    {
        int minRows = shell - 1;
        int minCol = shell - 1;
        int maxRows = arr.length - shell;
        int maxCol = arr[0].length - shell;

        //For left wall
        int ind = 0;
        for(int i=minRows, j = minCol; i<=maxRows; i++)
        {
            arr[i][j] = oneDimensional[ind];
            ind++;
        }
        //For bottom wall
        for(int i=maxRows, j=minCol; j<=maxCol; j++)
        {
            arr[i][j] = oneDimensional[ind];
            ind++;
        }
        //For right wall
        for(int i=maxRows - 1, j=maxCol; i>=minRows; i--)
        {
            arr[i][j] = oneDimensional[ind];
            ind++;
        }
        //For top wall
        for(int i=minRows, j=maxCol-1; j>=minCol + 1; j--)
        {
            arr[i][j] = oneDimensional[ind];
            ind++;
        }
    }

    private static void rotate(int[] oneDimensional, int rotate) 
    {
        rotate = rotate % oneDimensional.length;
        if(rotate < 0)
        {
            rotate = rotate + oneDimensional.length;
        }

        reverse(oneDimensional, 0, oneDimensional.length - rotate - 1);
        reverse(oneDimensional, oneDimensional.length - rotate, oneDimensional.length - 1);
        reverse(oneDimensional, 0, oneDimensional.length - 1);
    }

    static void reverse(int[] oneDimensional, int leftInd, int rightInd) 
    {
        while (leftInd < rightInd) 
        {
            int temp = oneDimensional[leftInd];
            oneDimensional[leftInd] = oneDimensional[rightInd];
            oneDimensional[rightInd] = temp;
            
            leftInd++;
            rightInd--;
        }
    }
}
