You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.


import java.util.Arrays;

public class Merge {
    public static void main(String[] args) {
    int m = 5, n = 8;
    int nums1[] = {2, 5, 12, 18, 20};
    int nums2[] = {7, 9, 11, 15, 25, 28, 30, 35};

    System.out.println(Arrays.toString(MergeSort(nums1, m, nums2, n))); 
    }

    private static int[] MergeSort(int[] nums1, int m, int[] nums2, int n) {
        int[] res = new int[m + n];
        int p1 = 0, p2 = 0, k = 0;
        
        while (p1 < nums1.length && p2 < nums2.length) 
        {
                if(nums1[p1] < nums2[p2])
                {
                    res[k] = nums1[p1];
                    p1++;
                    k++;
                }
                else
                {
                    res[k] = nums2[p2];
                    p2++;
                    k++;
                }
        }

        while (p1 < nums1.length)
        {
            res[k] = nums1[p1];
            p1++;
            k++;
        }
        while (p2 < nums2.length)
        {
            res[k] = nums2[p2];
            p2++;
            k++;
        }
        return res;
    }
}
