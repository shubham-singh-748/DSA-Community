/* 
1. You are given a number n and 
a number m representing number of rows and columns in a maze.

2. You are standing in the top-left corner and have to reach the bottom-right corner. Only two 
moves are allowed 'h' (1-step horizontal) and 'v' (1-step vertical).

3. Complete the body of getMazePath function - without changing signature - to 
get the list of all paths that can be used to move from top-left to bottom-right.

Use sample input and output to take idea about output.
*/

import java.util.ArrayList;
import java.util.Scanner;

public class GetMazePath {
    public static void main(String[] args) {
        try (Scanner scn = new Scanner(System.in)) {
        System.out.println("Enter nums");
        int rows = scn.nextInt();
        int col = scn.nextInt();

        ArrayList<String> res = PrintStairsPath(1, 1, rows, col);
        System.out.println(res);
        }
    }
    public static ArrayList<String> PrintStairsPath(int StartingRows, int StartingCol, 
    int DestinationRows, int DestinationCol)
    {
        if(StartingRows == DestinationRows || StartingCol == DestinationCol)
        {
            ArrayList<String> res = new ArrayList<>();
            res.add("");
            return res;
        }

        //Move Horizontal Traversal.
        ArrayList<String> HorTraversal = new ArrayList<>();
        if(StartingRows < DestinationRows)
        HorTraversal = PrintStairsPath(StartingRows + 1, StartingCol, DestinationRows, DestinationCol);

        //Move Vertical Traversal.
        ArrayList<String> VerTraversal = new ArrayList<>();
        if(StartingCol < DestinationCol)
        VerTraversal = PrintStairsPath(StartingRows, StartingCol + 1, DestinationRows, DestinationCol);

        //Declarig an empty arraylist string.
        ArrayList<String> myRes = new ArrayList<>();

        //Getting horizontal traversal results.
        for(String HorPaths: HorTraversal)
        {
            myRes.add("h" + HorPaths);
        }

        //Getting vertical traversal results
        for(String VerPahts: VerTraversal)
        {
            myRes.add("v" + VerPahts);
        }

        return myRes;
    }
}
