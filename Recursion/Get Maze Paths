/* 
1. You are given a number n and a number m representing 
number of rows and columns in a maze.

2. You are standing in the top-left corner and have to 
reach the bottom-right corner. Only two moves are allowed
'h' (1-step horizontal) and 'v' (1-step vertical).

3. Complete the body of getMazePath function - 
without changing signature - to get the list of 
all paths that can be used to move from top-left to bottom-right.

Use sample input and output to take idea about output.
*/

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int dr = scn.nextInt();
        int dc = scn.nextInt();
        ArrayList<String> paths = getMazePaths(1, 1, dr, dc);
        System.out.println(paths);
    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        if(sr == dr && sc == dc)
        {
            ArrayList<String> BaseRes = new ArrayList<>();
            BaseRes.add("");
            return BaseRes;
        }

        //Declare ArrayList for Horizontally and Vertically.
        ArrayList<String> HorPath = new ArrayList<>();
        ArrayList<String> VerPath = new ArrayList<>();

        //Declare an arraylist string.
        ArrayList<String> path = new ArrayList<>();


        //For Horizontal Moves
        if(sc < dc)
        {
            HorPath = getMazePaths(sr, sc + 1, dr, dc);
        }
        for(String hPaths: HorPath)
        {
            path.add("h" + hPaths);
        }

        //For Vertical Moves
        if(sr < dr)
        {
            VerPath = getMazePaths(sr + 1, sc, dr, dc);
        }
        for(String vPaths: VerPath)
        {
            path.add("v" + vPaths);
        }

        return path;
    }
}
