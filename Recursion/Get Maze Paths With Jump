/* 
1. You are given a number n and a number m 
representing number of rows and columns in a maze.

2. You are standing in the top-left corner and 
have to reach the bottom-right corner. 

3. In a single move you are allowed to jump 1 or 
more steps horizontally (as h1, h2, .. ), or 1 or more 
steps vertically (as v1, v2, ..) or 1 or more steps diagonally (as d1, d2, ..). 

4. Complete the body of getMazePath function - without changing 
signature - to get the list of all paths that can be used to move from top-left to bottom-right.

Use sample input and output to take idea about output.
*/


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int rows = scn.nextInt();
        int col = scn.nextInt();
        ArrayList<String> paths = getMazePaths(1, 1, rows, col);
        System.out.println(paths);
    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        if(sr == dr && sc == dc)
        {
            ArrayList<String> baseRes = new ArrayList<>();
            baseRes.add("");
            return baseRes;
        }

        //Declaring an Arraylist variable
        ArrayList<String> path = new ArrayList<>();

        //For Horizontal moves
        for(int moveSize = 1; moveSize <= dc - sc; moveSize++)
        {
            ArrayList<String> HorzntalPaths = getMazePaths(sr, sc + moveSize, dr, dc);
            for(String HorPaths: HorzntalPaths)
            {
                path.add("h" + moveSize + HorPaths);
            }
        }

        //For Vertically Paths
        for(int moveSize = 1; moveSize <= dr - sr; moveSize++)
        {
            ArrayList<String> VerticalPath = getMazePaths(sr + moveSize, sc, dr, dc);
            for(String VerPaths: VerticalPath)
            {
                path.add("v" + moveSize + VerPaths);
            }
        }

        //For Diagonally Paths
        for(int moveSize = 1; moveSize <= dr - sr && moveSize <= dc - sc; moveSize++)
        {
            ArrayList<String> DiagonalPaths = getMazePaths(sr + moveSize, sc + moveSize, dr, dc);
            for(String DiagPaths: DiagonalPaths)
            {
                path.add("d" + moveSize + DiagPaths);
            }
        }

        return path;
    }
}
